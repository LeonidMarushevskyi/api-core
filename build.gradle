plugins {
    id "org.sonarqube" version "2.2.1"
}

import com.github.jk1.license.render.*
allprojects {
    apply plugin: 'com.github.jk1.dependency-license-report'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    compileJava {options.encoding = "UTF-8"}

    project.ext {
        commonGroupId = "gov.ca.cwds.api"
        apiSecurityVersion = "3.0.4_825-RC"
        configPath = "$rootProject.projectDir/config/"
        dropwizardVersion = "1.1.0"
        dropwizardFlywayVersion = "1.0.0-1"
        metricsVersion = "3.1.0"
        swaggerVersion = "1.5.9"
        dropwizardSwaggerVersion = "1.0.0-1"
        elasticsearchVersion = "5.5.0"
        log4jVersion = "2.8.2"
        logbackVersion = "1.2.1"
        slf4jVersion = "1.7.25"
        commonsIOVersion = "2.6"
        commonsBeanutilsVersion = "1.8.3"
        commonsCollectionsVersion = "4.1"
        guavaVersion = "22.0"
        guiceVersion = "4.0"
        glassfishJerseyCoreVersion = "2.25.1"
        glassfishJerseyExtVersion = "2.23.2"
        jacksonVersion = "2.8.2"
        postgresqlVersion = "9.4.1208.jre7"
        dataModelVersion = '0.7.2_561-RC'
        droolsVersion = "7.1.0.Final"
        mapstructVersion = '1.1.0.Final'
        junitVersion = '4.12'
        mockitoVersion = "2.8.9"
        hamcrestVersion = "2.0.0.0"
        powerMockVersion = "1.7.3"
        h2Version = "1.4.194"
        liquibaseVersion = "3.5.3"

        projectMajorVersion = "1.7.4"

        isRelease = System.getProperty("Release") == "true"
        buildNumber = System.getProperty('BuildNumber')
        customVersion = System.getProperty('CustomVersion')

        projectSnapshotVersion = projectMajorVersion + "-SNAPSHOT"
        projectReleaseVersion = (customVersion == null || customVersion == "" || customVersion.startsWith('$') ? projectMajorVersion + '_' + buildNumber + '-RC' : customVersion )
        projectVersion = (isRelease ? projectReleaseVersion : projectSnapshotVersion )

        // Publishing configuration:
        snapshotMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/repo"
        releaseMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/libs-release"
        artifactoryRepo = (isRelease ? releaseMavenRepo : snapshotMavenRepo)
        allTestCoverageFile = "$buildDir/jacoco/allTestCoverage.exec"
    }

    sourceSets {
        main {
            output.resourcesDir = "build/classes/main"
        }
    }

    project.group = commonGroupId
    project.version = projectVersion

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/repo"
        }
    }

    dependencies {
        compile group: 'com.ibm', name: 'db2jcc4', version: '4.0.0'
        compile group: 'com.ibm', name: 'db2jcc_license_cisuz', version: '4.0.0'
        
        // LOGGING:
        compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        compile group: 'org.slf4j', name: 'slf4j-ext', version: slf4jVersion
        compile group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
        
        //Authenticate:
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5' 
        
        compile group: 'org.apache.poi', name: 'poi', version: '3.17'
        compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.17'
        compile group: 'org.apache.poi', name: 'poi-scratchpad', version: '3.17'
    }

    tasks.withType(Test) {
        enableAssertions = true
    }

    test {
        exclude '**/*IT*'
        exclude 'gov/ca/cwds/data/legacy/cms/dao/**'
        exclude '**/dbDependent/**'
        exclude 'gov/ca/cwds/cms/data/access/service/impl/clientrelationship/R08861DBTest.class'
        exclude 'gov/ca/cwds/cms/data/access/service/impl/clientrelationship/R08840DBTest.class'
        exclude 'gov/ca/cwds/cms/data/access/service/impl/clientrelationship/R10030DBTest.class'
        exclude 'gov/ca/cwds/cms/data/access/service/impl/clientrelationship/ClientRelationshipDBTest.class'
        exclude 'gov/ca/cwds/cms/data/access/service/impl/tribalmembership/R10030DBTest.class'
        exclude 'gov/ca/cwds/cms/data/access/service/impl/tribalmembership/R01128DBTest.class'
        jacoco {
            excludes = ["**org/drools/**/*"]
        }
    }

    task integrationTest(type: Test, dependsOn: testClasses) {
        include '**/*IT*'
        exclude '**/*Test*'
    }

    javadoc {
        options.addStringOption("charset", "UTF-8")
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", allTestCoverageFile
            property "sonar.jacoco.itReportPath", allTestCoverageFile
            property "sonar.exclusions", "src/main/resources/static/*.*, " +
                    "src/main/resources/static/css/*.*, " +
                    "src/main/resources/static/lib/*.*, " +
                    "src/main/java/gov/ca/cwds/data/legacy/cms/entity/*.*"
        }
    }

    task jacocoMergeTest(type: JacocoMerge) {
        destinationFile = file(allTestCoverageFile)
        executionData = project.fileTree(dir: '.', include:'**/build/jacoco/test.exec')
    }

    licenseReport {
        renderers = [new XmlReportRenderer(), new CwdsCsvReportRenderer(), new InventoryHtmlReportRenderer()]
        excludeGroups = ['gov.ca.cwds.api.libs']
    }

    def licenceFolder = 'build/reports/dependency-license'
    task libLicenceFolders(type: Copy){
        from licenceFolder
        into 'legal/licenses'
        exclude "index.html"
        exclude "index.xml" exclude "licenses.csv"
    }

    task libLicenseReportFiles(type: Copy){
        from licenceFolder
        into 'legal'
        include "index.html"
        include "index.xml"
    }

    task subProjectLicenseFiles(type: Copy){
        from "${project.projectDir.path}/${licenceFolder}"
        into "${project.rootDir}/legal/subProjects"
        include "licenses.csv"
        rename  { filename -> "${project.name}-${filename}"}
    }

    task generateAllLicenseFiles(dependsOn:[generateLicenseReport, libLicenseReportFiles ] ){
        println ("\n\n License files are generated in : ${licenceFolder}")
        doLast {
            tasks.subProjectLicenseFiles.execute()
        }
    }
}

subprojects {
    sonarqube {
        properties {
            property "sonar.jacoco.reportPaths", allTestCoverageFile
        }
    }
}

// Run generateAllLicenseFiles first to generate all report files
// EXAMPLE: ./gradlew generateAllLicenseFiles libLicenseReport
task libLicenseReport(){
    def licenseFiles = []
    def subProjectsDir = "${project.projectDir}/legal/subProjects"
    mkdir subProjectsDir
    new File(subProjectsDir).eachFileRecurse { licenseFiles << it }
    (new File("${project.projectDir}/legal/licenses.csv")).text = files(licenseFiles).collect{it.getText()}.join("\n")
}

dependencies {
    compile project(':api-core-rest')
    compile project(':api-core-cms')
    compile project(':api-core-abac')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
        maven {
            url artifactoryRepo
        }
    }
}

