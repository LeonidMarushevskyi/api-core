plugins {
    id "org.sonarqube" version "2.2.1"
    id 'com.github.jk1.dependency-license-report' version '0.3.14'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    compileJava {options.encoding = "UTF-8"}


    project.ext {
        versionPropertyValue = System.properties.getProperty('version')
        releaseVersion = "0.5.4"
        snapshotVersion = releaseVersion + '-SNAPSHOT'
        currentVersion = ((versionPropertyValue != null ) ? versionPropertyValue : snapshotVersion)
        commonGroupId = "gov.ca.cwds.api"
        apiSecurityVersion = "0.5.3_318"
        configPath = "$rootProject.projectDir/config/"
        dropwizardVersion = "1.1.0"
        dropwizardFlywayVersion = "1.0.0-1"
        metricsVersion = "3.1.0"
        swaggerVersion = "1.5.9"
        dropwizardSwaggerVersion = "1.0.0-1"
        elasticsearchVersion = "5.5.0"
        log4jVersion = "2.8.2"
        logbackVersion = "1.2.1"
        slf4jVersion = "1.7.25"
        commonsIOVersion = "2.6"
        commonsBeanutilsVersion = "1.8.3"
        commonsCollectionsVersion = "4.1"
        guavaVersion = "22.0"
        guiceVersion = "4.0"
        glassfishJerseyCoreVersion = "2.25.1"
        glassfishJerseyExtVersion = "2.23.2"
        jacksonVersion = "2.8.2"
        postgresqlVersion = "9.4.1208.jre7"
        dataModelVersion = '0.4.6'
        droolsVersion = "7.1.0.Final"
        mapstructVersion = '1.1.0.Final'
        junitVersion = '4.12'
        mockitoVersion = "2.8.9"
        hamcrestVersion = "2.0.0.0"
        powerMockVersion = "1.7.3"
        h2Version = "1.4.194"
        liquibaseVersion = "3.5.3"

        // Publishing configuration
        snapshotMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/repo"
        releaseMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/libs-release"
        artifactoryRepo = ((versionPropertyValue != null ) ? releaseMavenRepo : snapshotMavenRepo)
    }

    sourceSets {
        main {
            output.resourcesDir = "build/classes/main"
        }
    }

    licenseReport {
      renderer = new CWDSReportRenderer()
    }

    project.group = commonGroupId
    project.version = currentVersion

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/repo"
        }
    }

    dependencies {
        // LOGGING:
        compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        compile group: 'org.slf4j', name: 'slf4j-ext', version: slf4jVersion
        compile group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    }

    tasks.withType(Test) {
        enableAssertions = true
    }

    test {
        exclude '**/*IT*'
        jacoco {
            excludes = ["**org/drools/**/*"]
        }
    }

    task integrationTest(type: Test, dependsOn: testClasses) {
        include '**/*IT*'
        exclude '**/*Test*'
    }

    task libLicenceFolders(type: Copy){
        from 'build/reports/dependency-license'
        into 'legal/licenses'
        exclude "licenses.html"
        exclude "licenses.txt"
    }

    task libLicenseReportFiles(type: Copy){
        from 'build/reports/dependency-license'
        into 'legal'
        include "licenses.html"
        include "licenses.txt"
    }

    task libLicenseReport(dependsOn:[generateLicenseReport, libLicenceFolders,
                                     libLicenseReportFiles ] ){
    }
    javadoc {
        options.addStringOption("charset", "UTF-8")
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
            property "sonar.jacoco.itReportPath", "${buildDir}/jacoco/integrationTest.exec"
        }
    }

}

dependencies {
    compile project(':api-core-rest')
    compile project(':api-core-cms')
    compile project(':api-core-abac')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
        maven {
            url artifactoryRepo
        }
    }
}

//==================================================================================================
// Custom Groovy classes for Licence Reports.
// Move to own classes outside of build.
import org.gradle.api.Project;
import com.github.jk1.license.License;
import com.github.jk1.license.LicenseReportPlugin;
import com.github.jk1.license.ManifestData;
import com.github.jk1.license.ModuleData;
import com.github.jk1.license.PomData;
import com.github.jk1.license.ProjectData;
import com.github.jk1.license.render.ReportRenderer;

public class CWDSReportRenderer implements ReportRenderer {

    @Override
    void render(ProjectData data) {
        new CWDSTextReportRenderer().render(data)
        new CWDSHtmlReportRenderer().render(data)

    }
}
public class CWDSTextReportRenderer implements ReportRenderer {

  private Project project
  private LicenseReportPlugin.LicenseReportExtension config
  private File output
  private int counter
  private String fileName

  CWDSTextReportRenderer(String filename = 'licenses.txt'){
      this.fileName = filename
  }
  public void render(ProjectData data) {
        project = data.project
        config = project.licenseReport
        output = new File(config.outputDir, fileName)
        output.text = """
================================================================
       Dependency License Report for $project.name ${if (!'unspecified'.equals(project.version))
            project.version else ''}
================================================================
"""
      output << "\n\n"
        printDependencies(data)
        output << """
This report was generated at ${new Date()}.
"""
    }

    private void printDependencies(ProjectData data) {
        data.allDependencies.sort().each {
            printDependency(it)
        }
    }

    private String printDependency(ModuleData data) {
        boolean projectUrlDone = false
        if (data.name) output << "License Name: $data.name "
        if (data.version) output << " Version: $data.version\n\n"

        if (data.poms.isEmpty() && data.manifests.isEmpty()) {
            output << "No license information found\n\n"
            return
        }

        if (!data.manifests.isEmpty() && !data.poms.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            PomData pomData = data.poms.first()
            if (manifest.url && pomData.projectUrl && manifest.url == pomData.projectUrl) {
                output << "Project URL: $manifest.url\n\n"
                projectUrlDone = true
            }
        }

        if (!data.manifests.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            if (manifest.url && !projectUrlDone) {
                output << "Manifest Project URL: $manifest.url\n\n"
            }
            if (manifest.license) {
                if (manifest.license.startsWith("http")) {
                    output << "Manifest license URL: $manifest.license\n\n"
                } else if (manifest.hasPackagedLicense) {
                    output << "Packaged License File: $manifest.license\n\n"
                } else {
                    output << "Manifest License: $manifest.license (Not packaged)\n\n"
                }
            }
        }

        if (!data.poms.isEmpty()) {
            PomData pomData = data.poms.first()
            if (pomData.projectUrl && !projectUrlDone) {
                output << "POM Project URL: $pomData.projectUrl\n\n"
            }
            if (pomData.licenses) {
                pomData.licenses.each { License license ->
                    output << "POM License: $license.name"
                    if (license.url) {
                        if (license.url.startsWith("http")) {
                            output << " - $license.url\n\n"
                        } else {
                            output << "License: $license.url\n\n"
                        }
                    }
                }
            }
        }
        if (!data.licenseFiles.isEmpty() && !data.licenseFiles.first().files.isEmpty()) {
            output << 'Embedded license: '
            output << "\n\n"
            output << data.licenseFiles.first().files.collect({ "                    " +
                    "****************************************\n\n \t\t\t$it\n\n" + new
                    File("$config.outputDir/$it").text + "\n"}).join('')
        }
        output <<
                "\n\n================================================================================\n\n"
    }
}

import com.github.jk1.license.LicenseReportPlugin.LicenseReportExtension
class CWDSHtmlReportRenderer implements ReportRenderer {

    private Project project
    private LicenseReportExtension config
    private File output
    private int counter
    private String fileName
    private String libLicenseUrl

    CWDSHtmlReportRenderer(String libLicenseUrl = "licenses",String fileName = 'licenses.html') {
        this.fileName = fileName
        this.libLicenseUrl = libLicenseUrl
    }

    public void render(ProjectData data) {
        project = data.project
        config = project.licenseReport
        output = new File(config.outputDir, fileName)
        output.text = """
<html>
<head>
<title>Dependency License Report for $project.name</title>
<style>
    table, th, td { border: 1px solid black; }
</style>
<head>
<body>
<h1>Dependency License Report for $project.name ${if (!'unspecified'.equals(project.version)) project.version else ''}</h1>
"""
        printDependencies(data)
        output << """
<hr />
<p id="timestamp">This report was generated at <em>${new Date()}</em>.</p>
</body>
</html>
"""
    }

    private void printDependencies(ProjectData data) {
        output << "<table >"
        output << "<hr><th>name</th><th>project url</th><th>license</th>" +
                       "<th>Embeded License</th></hr>"
        data.allDependencies.sort().each {
            output << "<tr>"
            printDependency(it)
            output << "</tr>"
        }
        output << "</table>"
    }

    private String printDependency(ModuleData data) {
        boolean projectUrlDone = false
        String name = ""
        String urls = ""
        String licenses = ""
        name += "<p><strong> ${++counter}.</strong> "
        if (data.name) name += "$data.name "
        name += "</p>"

        if (data.poms.isEmpty() && data.manifests.isEmpty()) {
            name += "<p><strong>No license information found</strong></p>"
        }

        if (!data.manifests.isEmpty() && !data.poms.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            PomData pomData = data.poms.first()
            if (manifest.url && pomData.projectUrl && manifest.url == pomData.projectUrl) {
                urls += "<p> <code><a href=\"$manifest.url\">$manifest.url</a></code></p>"
                projectUrlDone = true
            }
        }

        if (!data.manifests.isEmpty()) {
            ManifestData manifest = data.manifests.first()
            if (manifest.url && !projectUrlDone) {
                urls += "<p> <code><a href=\"$manifest.url\">$manifest.url</a></code></p>"
            }
            if (manifest.license) {
                if (manifest.license.startsWith("http")) {
                    licenses += "<p><strong>Manifest license URL:</strong> <a href=\"$manifest.license\">$manifest.license</a></p>"
                } else if (manifest.hasPackagedLicense) {
                    licenses += "<p><strong>Manifest license URL:</strong> <a href=\"$manifest.url\">$manifest.license</a></p>"
                } else {
                    licenses += "<p><strong>Manifest license URL:</strong>$manifest.license (Not packaged)</p>"
                }
            }
        }

        if (!data.poms.isEmpty()) {
            PomData pomData = data.poms.first()
            if (pomData.projectUrl && !projectUrlDone) {
                urls += "<p> <code><a href=\"$pomData.projectUrl\">$pomData.projectUrl</a></code></p>"
            }
            if (pomData.licenses) {
                pomData.licenses.each { License license ->
                    licenses += "<p><strong>POM License: $license.name</strong>"
                    if (license.url) {
                        if (license.url.startsWith("http")) {
                            licenses += " - <a href=\"$license.url\">$license.url</a>"
                        } else {
                            licenses += "<p> $license.url</p>"
                        }
                    }
                }
            }
        }

        output << "<td>$name</td>"
        output << "<td>$urls</td>"
        output << "<td>$licenses</td>"

        output << "<td>"
        if (!data.licenseFiles.isEmpty() && !data.licenseFiles.first().files.isEmpty()) {
            output << '<p>'
            output << data.licenseFiles.first().files.collect({ "<a " +
                    "href=\"$libLicenseUrl/$it\">$it</a>" +
                    " " +
                    "" }).join('')
            output << '</p>'
        }
        output << "</td>"
    }
}

