plugins {
    id "org.sonarqube" version "2.2.1"
    id 'com.github.jk1.dependency-license-report' version '0.8'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    compileJava {options.encoding = "UTF-8"}

    project.ext {
        commonGroupId = "gov.ca.cwds.api"
        apiSecurityVersion = "1.6.2_418-RC"
        configPath = "$rootProject.projectDir/config/"
        dropwizardVersion = "1.1.0"
        dropwizardFlywayVersion = "1.0.0-1"
        metricsVersion = "3.1.0"
        swaggerVersion = "1.5.9"
        dropwizardSwaggerVersion = "1.0.0-1"
        elasticsearchVersion = "5.5.0"
        log4jVersion = "2.8.2"
        logbackVersion = "1.2.1"
        slf4jVersion = "1.7.25"
        commonsIOVersion = "2.6"
        commonsBeanutilsVersion = "1.8.3"
        commonsCollectionsVersion = "4.1"
        guavaVersion = "22.0"
        guiceVersion = "4.0"
        glassfishJerseyCoreVersion = "2.25.1"
        glassfishJerseyExtVersion = "2.23.2"
        jacksonVersion = "2.8.2"
        postgresqlVersion = "9.4.1208.jre7"
        dataModelVersion = '0.6.2_498-RC'
        droolsVersion = "7.1.0.Final"
        mapstructVersion = '1.1.0.Final'
        junitVersion = '4.12'
        mockitoVersion = "2.8.9"
        hamcrestVersion = "2.0.0.0"
        powerMockVersion = "1.7.3"
        h2Version = "1.4.194"
        liquibaseVersion = "3.5.3"

        projectMajorVersion = "1.6.3"

        isRelease = System.getProperty("Release") == "true"
        buildNumber = System.getProperty('BuildNumber')
        customVersion = System.getProperty('CustomVersion')

        projectSnapshotVersion = projectMajorVersion + "-SNAPSHOT"
        projectReleaseVersion = (customVersion == null || customVersion == "" || customVersion.startsWith('$') ? projectMajorVersion + '_' + buildNumber + '-RC' : customVersion )
        projectVersion = (isRelease ? projectReleaseVersion : projectSnapshotVersion )

        // Publishing configuration
        snapshotMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/repo"
        releaseMavenRepo = "http://sonar.dev.cwds.io:8081/artifactory/libs-release"
        artifactoryRepo = (isRelease ? releaseMavenRepo : snapshotMavenRepo)
    }

    sourceSets {
        main {
            output.resourcesDir = "build/classes/main"
        }
    }

    project.group = commonGroupId
    project.version = projectVersion

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/repo"
        }
    }

    dependencies {
        compile group: 'com.ibm', name: 'db2jcc4', version: '4.0.0'
        compile group: 'com.ibm', name: 'db2jcc_license_cisuz', version: '4.0.0'
        // LOGGING:
        compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        compile group: 'org.slf4j', name: 'slf4j-ext', version: slf4jVersion
        compile group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
        
        //Authenticate:
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5' 
    }

    tasks.withType(Test) {
        enableAssertions = true
    }

    test {
        exclude '**/*IT*'
        exclude 'gov/ca/cwds/data/legacy/cms/dao/**'
        jacoco {
            excludes = ["**org/drools/**/*"]
        }
    }

    task integrationTest(type: Test, dependsOn: testClasses) {
        include '**/*IT*'
        exclude '**/*Test*'
    }

    javadoc {
        options.addStringOption("charset", "UTF-8")
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    sonarqube {
        properties {
            property "sonar.jacoco.reportPath", "${buildDir}/jacoco/test.exec"
            property "sonar.jacoco.itReportPath", "${buildDir}/jacoco/integrationTest.exec"
        }
    }

}

dependencies {
    compile project(':api-core-rest')
    compile project(':api-core-cms')
    compile project(':api-core-abac')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
        maven {
            url artifactoryRepo
        }
    }
}

licenseReport {
    renderers = [new XmlReportRenderer(), new CwdsCsvReportRenderer(), new InventoryHtmlReportRenderer()]
    excludeGroups = ['gov.ca.cwds.api.libs']
}

def licenceFolder = 'build/reports/dependency-license'
task libLicenceFolders(type: Copy){
    from licenceFolder
    into 'legal/licenses'
    exclude "index.html"
    exclude "index.xml"
    exclude "licenses.csv"
}

import com.github.jk1.license.render.*
task libLicenseReportFiles(type: Copy){
    from licenceFolder
    into 'legal'
    include "index.html"
    include "index.xml"
    include "licenses.csv"
}

task libLicenseReport(dependsOn:[generateLicenseReport, libLicenceFolders,
                                 libLicenseReportFiles ] ){
    println ("\n\n License files are generated in : ${licenceFolder}")
}

//==================================================================================================
// Custom Groovy classes for Licence Reports.
// Move to own classes outside of build.
import com.github.jk1.license.ModuleData;
import com.github.jk1.license.ProjectData;
import com.github.jk1.license.LicenseReportExtension
public class CwdsCsvReportRenderer extends CsvReportRenderer {
    @Override
    public void render(ProjectData data){
        LicenseReportExtension config = data.project.licenseReport
        File output = new File(config.outputDir, filename)
        output.write('')

        if (includeHeaderLine) {
            output << header();
        }

        data.allDependencies.sort().each {
            renderDependency(output, it)
        }
    }

    CwdsCsvReportRenderer(String filename = 'licenses.csv') {
        this.filename = filename
    }

    void renderDependency(File output, ModuleData data) {
        output << line(data)
    }

    private String header(){
        return "${quote('artifact')}$separator${quote('name')}$separator${quote('version')}$separator${quote('moduleUrl')}$separator${quote('moduleLicense')}$separator${quote('moduleLicenseUrl')}$separator${quote('projectUrl')}$separator$nl"
    }

    private String line(ModuleData data){
        def (String moduleUrl, String moduleLicense, String moduleLicenseUrl) = LicenseDataCollector.singleModuleLicenseInfo(data)
        String artifact = "${data.group}:${data.name}:${data.version}"
        return "${quote(artifact)}$separator${quote(data.name)}$separator${quote(data.version)}$separator${quote(moduleUrl)}$separator${quote(moduleLicense)}$separator${quote(moduleLicenseUrl)}$separator${quote(projectUrl(data))}$separator$nl"
    }

    private String projectUrl(ModuleData data){
        Set urls = new HashSet();
        data.poms.each {
            urls << it.projectUrl
        }
        urls.join(" ")
    }

    private String quote(String content) {
        if (content == null || content.isEmpty()) {
            return ''
        }
        content = content.trim()
        content = content.replaceAll(quote, "\\\\$quote")
        "${quote}${content}${quote}"
    }
}

